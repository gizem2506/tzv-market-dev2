generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "postgresql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

enum UserRole {
    ADMIN
    USER
    MANAGER
}

model User {
    id                    String                 @id @default(cuid())
    name                  String?
    email                 String?                @unique
    emailVerified         DateTime?
    image                 String?
    password              String?
    role                  UserRole               @default(USER)
    accounts              Account[]
    isTwoFactorEnabled    Boolean                @default(false)
    created_date          DateTime               @default(now())
    twoFactorConfirmation TwoFactorConfirmation?
    comments              Comment[]
    addresses             UserAddress[]
    payment               Payment[]

    Order Order[]
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    User              User    @relation(fields: [userId], references: [id])

    @@unique([provider, providerAccountId])
    //user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@index([userId])
}

model VerificationToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model PasswordResetToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model TwoFactorToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model TwoFactorConfirmation {
    id     String @id @default(cuid())
    userId String

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId])
}

model Category {
    id           Int       @id @default(autoincrement())
    categoryName String
    categorySlug String
    verify       Boolean
    created_date DateTime  @default(now())
    products     Product[] @relation("ProductCategories")
}

model Product {
    id                  Int            @id @default(autoincrement())
    product_name        String
    price               Decimal
    product_kdv         Decimal        @default(0)
    product_stock       Int
    product_description String
    product_slug        String
    created_date        DateTime       @default(now())
    categories          Category[]     @relation("ProductCategories")
    comments            Comment[]
    product_image       ProductImage[]
    Order               Order[]

    @@unique([product_slug])
}

model Comment {
    id        Int      @id @default(autoincrement())
    userId    String
    productId Int
    comment   String
    date      DateTime @default(now())
    rating    String
    verify    Boolean
    user      User     @relation(fields: [userId], references: [id])
    product   Product  @relation(fields: [productId], references: [id])

    @@index([userId])
    @@index([productId])
}

model ProductImage {
    id        Int    @id @default(autoincrement())
    productId Int
    imageName String

    product Product @relation(fields: [productId], references: [id])

    @@index([productId])
}

model OurServices {
    id                Int      @id @default(autoincrement())
    icon              String
    our_services_name String
    created_date      DateTime @default(now())
}

model Slider {
    id           Int      @id @default(autoincrement())
    slider_image String
    slider_title String
    created_date DateTime @default(now())
}

model UserAddress {
    id                  Int         @id @default(autoincrement())
    address_name        String
    receiver_name       String
    landline_phone      String
    cell_phone          String
    address_description String
    city                String
    district            String
    zipCode             String
    date                DateTime    @default(now())
    user                User        @relation(fields: [userId], references: [id])
    userId              String
    Order               Order[]
    type                AddressType @default(SHIPPING)

    @@index([userId])
}

enum AddressType {
    SHIPPING
    BILLING
}

model Payment {
    id             Int      @id @default(autoincrement())
    userId         String
    amount         Float
    payment_date   DateTime @default(now())
    payment_method String   @default("card")
    user           User     @relation(fields: [userId], references: [id])

    @@index([userId])
}

model Order {
    id           Int         @id @default(autoincrement())
    productId    Int
    addressId    Int
    quantity     Int
    userId       String
    order_date   DateTime    @default(now())
    status       OrderStatus
    total_amount Decimal
    user         User        @relation(fields: [userId], references: [id])
    product      Product     @relation(fields: [productId], references: [id])
    address      UserAddress @relation(fields: [addressId], references: [id])

    @@index([userId])
    @@index([productId])
    @@index([addressId])
}

enum OrderStatus {
    pending
    processing
    completed
    cancelled
}
